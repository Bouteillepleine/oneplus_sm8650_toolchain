name: Beta Build 6.1.118 OPPO+OPlus+Realme OKI Kernel

env:
  TZ: Asia/Shanghai
  CPU: 'sm8650'
  FEIL: 'oppo+oplus+realme'
  ANDROID_VERSION: 'android14'
  KERNEL_VERSION: '6.1'
  KERNEL_NAME: 'android14-11-o-gca13bffobf09'
  KERNELSU_VARIANT: 'SukiSU-Ultra'
  KERNELSU_BRANCH: 'susfs-main'

on:
  workflow_dispatch:
  # Uncomment the following code to enable daily scheduled builds
#  schedule:
#    - cron: '0 23 * * *'  # UTC 23:00 (Beijing Time 07:00 the next day)
    inputs:
      ksu_type:
        description: 'KernelSU Branch (SukiSU Ultra/KernelSU Next, default SukiSU Ultra)'
        required: true
        type: choice
        default: 'sukisu'
        options:
          - 'sukisu'
          - 'ksunext'
      hook_method:
        description: 'Hook Mode (manual is sufficient in most cases, kprobes hook is needed only for specific sus su mode scenarios)'
        required: true
        type: choice
        default: 'manual'
        options:
          - 'manual'
          - 'kprobes'
      kpm_enable:
        description: 'Whether to enable KPM (only applies to sukiSU; may slightly increase power consumption, can be disabled if not needed)'
        required: true
        type: choice
        default: 'true'
        options:
          - 'true'
          - 'false'
      lz4_enable:
        description: 'Whether to install lz4 1.10.0+zstd 1.5.7 patches and LZ4KD patch (0=none, 1=install lz4&zstd patches, 2=install lz4kd patch, 3=install both, default 1)'
        required: true
        type: choice
        default: '1'
        options:
          - '0'
          - '1'
          - '2'
          - '3'
      bbr_enable:
        description: 'Whether to enable BBR algorithm (optimizes uplink data, little significance for daily phone use and may even negatively impact performance; false=disable, true=enable algorithm only, default=set as default)'
        required: true
        type: choice
        default: 'false'
        options:
          - 'false'
          - 'true'
          - 'default'
      better_net:
        description: 'Whether to enable enhanced network optimization configuration (optimizes proxy connections, IPv6, etc.)'
        required: true
        type: choice
        default: 'true'
        options:
          - 'true'
          - 'false'
      ssg_rekernel_enable:
        description: 'Whether to enable Samsung SSG IO Scheduler and Re-Kernel support (0=none, 1=install SSG IO Scheduler, 2=install Re-Kernel, 3=install both, default 1)'
        required: true
        type: choice
        default: '1'
        options:
          - '0'
          - '1'
          - '2'
          - '3'
      kernel_suffix:
        description: 'Kernel suffix (leave empty for default, do not start with a hyphen, avoid spaces or reserved characters that affect command execution)'
        required: false
        type: string
        default: ''

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      ksuver: ${{ steps.ksu_version.outputs.ksuver }}
    steps:
      - name: Install and Configure Environment Dependencies
        run: |
          sudo apt-mark hold firefox
          sudo apt-mark hold libc-bin
          sudo apt purge man-db
          sudo rm -rf /var/lib/man-db/auto-update
          sudo apt update
          sudo apt-get install -y --no-install-recommends \
            curl bison flex make binutils git perl gcc python3 \
            python-is-python3 bc libssl-dev libelf-dev \
            bc aria2 zip unzip ccache
      - name: Configure ccache Directory
        run: |
          echo "CCACHE_DIR=$HOME/.ccache_6.1.118" >> $GITHUB_ENV
          echo "CCACHE_MAXSIZE=3G" >> $GITHUB_ENV
          echo "Current Disk Space:"
          df -h
          echo "Current Kernel Build Version: 6.1.118"
          rm -rf kernel_workspace
          mkdir kernel_workspace
      - name: Load ccache Cache for Current Kernel Version
        uses: actions/cache@v3
        id: ccache-restore
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-new-6.1.118-${{ runner.os }}-main
          restore-keys: |
            ccache-new-6.1.118-${{ runner.os }}-
            ccache-new-6.1.118-
            ccache-new-
      
      - name: Initialize and Configure ccache
        run: |
          # Set ccache environment variables
          export CCACHE_COMPILERCHECK="%compiler% -dumpmachine; %compiler% -dumpversion"
          export CCACHE_NOHASHDIR="true"
          export CCACHE_HARDLINK="true"
          export CCACHE_DIR="${{ env.CCACHE_DIR }}"
          export CCACHE_MAXSIZE="${{ env.CCACHE_MAXSIZE }}"
          
          # Ensure ccache directory exists
          mkdir -p "$CCACHE_DIR"
          
          # Reconfigure cache size for each run
          echo "Configuring ccache cache size to: $CCACHE_MAXSIZE"
          ccache -M "$CCACHE_MAXSIZE"
          ccache -o compression=true
          
          # Display initial cache status
          echo "ccache initial status:"
          ccache -s
          
          # If cache restore is successful, display detailed information
          if [ "${{ steps.ccache-restore.outputs.cache-hit }}" == 'true' ]; then
            echo "ccache cache hit details:"
            ccache -sv
          fi
      
      - name: Initialize Source Repository and llvm-Clang20 Toolchain
        run: |
          cd kernel_workspace
          echo "Cloning Source Repository..."
          aria2c -s16 -x16 -k1M https://github.com/cctv18/android_kernel_common_oneplus_sm8650/archive/refs/heads/oneplus/sm8650_v_15.0.0_oneplus12_6.1.118.zip -o common.zip && 
          unzip -q common.zip && 
          mv "android_kernel_common_oneplus_sm8650-oneplus-sm8650_v_15.0.0_oneplus12_6.1.118" common &&
          rm -rf common.zip &
          
          echo "Cloning llvm-Clang20 Toolchain..." &&
          mkdir -p clang20 &&
          aria2c -s16 -x16 -k1M https://github.com/cctv18/oneplus_sm8650_toolchain/releases/download/LLVM-Clang20-r547379/clang-r547379.zip -o clang.zip &&
          unzip -q clang.zip -d clang20 &&
          rm -rf clang.zip &
          
          echo "Cloning Build Tools..." &&
          aria2c -s16 -x16 -k1M https://github.com/cctv18/oneplus_sm8650_toolchain/releases/download/LLVM-Clang20-r547379/build-tools.zip -o build-tools.zip &&
          unzip -q build-tools.zip &&
          rm -rf build-tools.zip &
          
          wait
          echo "All Source Code and llvm-Clang20 Toolchain Initialization Completed!"
          echo "Removing ABI Protection & Removing Dirty Suffix..."
          rm common/android/abi_gki_protected_exports_* || true
          for f in common/scripts/setlocalversion; do
            sed -i 's/ -dirty//g' "$f"
            sed -i '$i res=$(echo "$res" | sed '\''s/-dirty//g'\'')' "$f"
          done
      - name: Add KernelSU
        id: ksu_version
        run: |
          # Enter kernel workspace directory
          cd kernel_workspace
          if [[ ${{ github.event.inputs.ksu_type }} == "sukisu" ]]; then
            echo "Configuring SukiSU Ultra..."
            curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU-Ultra/refs/heads/main/kernel/setup.sh" | bash -s susfs-main
            cd ./KernelSU
            # Get the short hash (8 characters) of the current Git commit
            GIT_COMMIT_HASH=$(git rev-parse --short=8 HEAD)
            echo "Current Commit Hash: $GIT_COMMIT_HASH"
            export KSU_VERSION=$KSU_VERSION
            # Try up to 3 times to get the KernelSU API version
            for i in {1..3}; do
              # Extract KSU_API_VERSION from the remote Makefile
              KSU_API_VERSION=$(curl -s "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/susfs-main/kernel/Makefile" | 
                # Find the first line containing the version definition
                grep -m1 "KSU_VERSION_API :=" | 
                # Extract the value after the equals sign
                awk -F'= ' '{print $2}' | 
                # Remove all whitespace characters
                tr -d '[:space:]')
              # If version is successfully obtained, break the loop; otherwise, wait 1 second and retry
              [ -n "$KSU_API_VERSION" ] && break || sleep 1
            done
            # If retrieval fails, use default version 3.1.7
            [ -z "$KSU_API_VERSION" ] && KSU_API_VERSION="3.1.7"
            # Store API version in GitHub environment variables
            echo "KSU_API_VERSION=$KSU_API_VERSION" >> $GITHUB_ENV
            # Create version definition template & version format function: use the obtained commit hash and fixed suffix
            # KSU_VERSION_API: API version definition
            # KSU_VERSION_FULL: Full version definition
            VERSION_DEFINITIONS=$'define get_ksu_version_full\nv\\$1-'"$GIT_COMMIT_HASH"$'@cctv18\nendef\n\nKSU_VERSION_API := '"$KSU_API_VERSION"$'\nKSU_VERSION_FULL := v'"$KSU_API_VERSION"$'-'"$GIT_COMMIT_HASH"$'@cctv18'
            # Clean old version definitions from the kernel Makefile
            # Remove version function
            sed -i '/define get_ksu_version_full/,/endef/d' kernel/Makefile
            # Remove API version definition
            sed -i '/KSU_VERSION_API :=/d' kernel/Makefile
            # Remove full version definition
            sed -i '/KSU_VERSION_FULL :=/d' kernel/Makefile
            # Insert new version definitions after the REPO_OWNER line
            awk -v def="$VERSION_DEFINITIONS" '
              # When the REPO_OWNER line is found, insert the version definitions and set a flag
              /REPO_OWNER :=/ {print; print def; inserted=1; next}
              # Print all lines
              1
              # If no insertion point is found, append at the end of the file
              END {if (!inserted) print def}
            ' kernel/Makefile > kernel/Makefile.tmp && mv kernel/Makefile.tmp kernel/Makefile
            # Generate custom version number (based on commit count), use 114514 if failed
            KSU_VERSION=$(expr $(git rev-list --count main) + 10700 2>/dev/null || echo 114514)
            # Store version number in GitHub environment variables
            echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
            echo "ksuver=$KSU_VERSION" >> $GITHUB_OUTPUT
            # Verify the modification result
            grep -A10 "REPO_OWNER" kernel/Makefile  # Check content after the insertion point
            grep "KSU_VERSION_FULL" kernel/Makefile # Confirm version definition exists
            echo "SukiSU Version: v${KSU_API_VERSION}-${GIT_COMMIT_HASH}@cctv18"
          else
            echo "Configuring KernelSU Next..."
            curl -LSs "https://raw.githubusercontent.com/pershoot/KernelSU-Next/next-susfs/kernel/setup.sh" | bash -s next-susfs
            cd KernelSU-Next
            KSU_VERSION=$(expr $(curl -sI "https://api.github.com/repos/pershoot/KernelSU-Next/commits?sha=next&per_page=1" | grep -i "link:" | sed -n 's/.*page=\([0-9]*\)>; rel="last".*/\1/p') "+" 10200)
            echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
            echo "ksuver=$KSU_VERSION" >> $GITHUB_OUTPUT
            sed -i "s/DKSU_VERSION=11998/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile
          fi
      - name: Apply KernelSU & SUSFS Patches
        run: |
          cd kernel_workspace
          if [[ ${{ github.event.inputs.ksu_type }} == "sukisu" ]]; then
            echo "Adding SukiSU Ultra Patches..."
            git clone https://github.com/ShirkNeko/susfs4ksu.git -b gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}
            git clone https://github.com/ShirkNeko/SukiSU_patch.git
            cp ./susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch ./common/
            cp ./susfs4ksu/kernel_patches/fs/* ./common/fs/
            cp ./susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
            cp ./SukiSU_patch/hooks/syscall_hooks.patch ./common/
            cp ./SukiSU_patch/69_hide_stuff.patch ./common/
            cd ./common
            patch -p1 < 50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch || true
            patch -p1 < syscall_hooks.patch || true
            patch -p1 < 69_hide_stuff.patch || true
          else
            echo "Adding KernelSU Next Patches..."
            git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}
            git clone https://github.com/WildKernels/kernel_patches.git
            cp ./susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch ./common/
            cp ./susfs4ksu/kernel_patches/fs/* ./common/fs/
            cp ./susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
            cp ./kernel_patches/next/scope_min_manual_hooks_v1.4.patch ./common/
            cp ./kernel_patches/69_hide_stuff.patch ./common/
            cd ./common
            patch -p1 < 50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch || true
            patch -p1 -N -F 3 < scope_min_manual_hooks_v1.4.patch || true
            patch -p1 -N -F 3 < 69_hide_stuff.patch || true
          fi
          
      - name: Apply lz4 1.10.0 & zstd 1.5.7 Patches
        run: |
          if [[ "${{ github.event.inputs.lz4_enable }}" == "1" || "${{ github.event.inputs.lz4_enable }}" == "3" ]]; then
            echo "Adding lz4 1.10.0 & zstd 1.5.7 Patches..."
            cd kernel_workspace
            git clone https://github.com/cctv18/oppo_oplus_realme_sm8650.git
            cp ./oppo_oplus_realme_sm8650/zram_patch/001-lz4.patch ./common/
            cp ./oppo_oplus_realme_sm8650/zram_patch/lz4armv8.S ./common/lib
            cp ./oppo_oplus_realme_sm8650/zram_patch/002-zstd.patch ./common/
            cd ./common
            git apply -p1 < 001-lz4.patch || true
            patch -p1 < 002-zstd.patch || true
          fi
      - name: Apply lz4kd Patch
        run: |
          if [[ "${{ github.event.inputs.lz4_enable }}" == "2" || "${{ github.event.inputs.lz4_enable }}" == "3" ]]; then
            echo "Adding lz4kd Patch..."
            cd kernel_workspace
            if [[ ${{ github.event.inputs.ksu_type }} == "ksunext" ]]; then
              git clone https://github.com/ShirkNeko/SukiSU_patch.git
            fi
            cd common
            cp -r ../SukiSU_patch/other/zram/lz4k/include/linux/* ./include/linux/
            cp -r ../SukiSU_patch/other/zram/lz4k/lib/* ./lib
            cp -r ../SukiSU_patch/other/zram/lz4k/crypto/* ./crypto
            cp ../SukiSU_patch/other/zram/zram_patch/${{ env.KERNEL_VERSION }}/lz4kd.patch ./
            patch -p1 -F 3 < lz4kd.patch || true
          fi
          
      - name: Add KSU & SUSFS Configuration Items
        run: |
          cd kernel_workspace
          echo "CONFIG_KSU=y" >> ./common/arch/arm64/configs/gki_defconfig
          if [[ ${{ github.event.inputs.kpm_enable }} == 'true' && ${{ github.event.inputs.ksu_type }} == "sukisu" ]]; then
            echo "CONFIG_KPM=y" >> ./common/arch/arm64/configs/gki_defconfig
          fi
          if [ "${{ github.event.inputs.hook_method }}" == "kprobes" ]; then
            echo "Enabling kprobes Hook..."
            echo "CONFIG_KSU_SUSFS_SUS_SU=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_MANUAL_HOOK=n" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_KPROBES_HOOK=y" >> ./common/arch/arm64/configs/gki_defconfig
          else
            echo "Enabling Manual Hook..."
            echo "CONFIG_KSU_MANUAL_HOOK=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./common/arch/arm64/configs/gki_defconfig
          fi
          echo "CONFIG_KSU_SUSFS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./common/arch/arm64/configs/gki_defconfig
          #echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./common/arch/arm64/configs/gki_defconfig
          if [[ "${{ github.event.inputs.lz4k_enable }}" == "true" ]]; then
            echo "CONFIG_ZSMALLOC=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_CRYPTO_LZ4HC=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_CRYPTO_LZ4K=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_CRYPTO_LZ4KD=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_CRYPTO_842=y" >> ./common/arch/arm64/configs/gki_defconfig
            # The following configurations have not been verified for necessity and require testing
            #echo "CONFIG_ZRAM_WRITEBACK=y" >> ./common/arch/arm64/configs/gki_defconfig
            #sed -i 's/CONFIG_ZRAM=m/CONFIG_ZRAM=y/g' ./common/arch/arm64/configs/gki_defconfig
            #sed -i 's/CONFIG_MODULE_SIG=y/CONFIG_MODULE_SIG=n/g' ./common/arch/arm64/configs/gki_defconfig
          fi
          # Enable O2 compilation optimization configuration
          echo "CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y" >> ./common/arch/arm64/configs/gki_defconfig
          # Enable IPVS (testing)
          echo "CONFIG_IP_VS=y" >> ./common/arch/arm64/configs/gki_defconfig
          # Disable defconfig check
          sed -i 's/check_defconfig//' ./common/build.config.gki
          
      - name: Enable Enhanced Network Optimization Configuration
        run: |
          cd kernel_workspace
          if [[ "${{ github.event.inputs.better_net }}" == "true" ]]; then
            # Enable BPF Stream Parser for high-performance network traffic processing, enhancing network monitoring and analysis capabilities
            echo "CONFIG_BPF_STREAM_PARSER=y" >> ./common/arch/arm64/configs/gki_defconfig
            # Enable enhanced Netfilter firewall extension modules, supporting address type-based matching rules, enabling IP set support, improving firewall rule flexibility, and supporting more complex traffic filtering strategies
            echo "CONFIG_NETFILTER_XT_MATCH_ADDRTYPE=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_NETFILTER_XT_SET=y" >> ./common/arch/arm64/configs/gki_defconfig
            # Enable IP set framework and various data structure implementations, providing efficient large-scale IP address management, improving firewall rule processing efficiency, and reducing memory usage
            echo "CONFIG_IP_SET=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_MAX=65534" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_BITMAP_IP=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_BITMAP_IPMAC=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_BITMAP_PORT=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_IP=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_IPMARK=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_IPPORT=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_IPPORTIP=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_IPPORTNET=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_IPMAC=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_MAC=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_NETPORTNET=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_NET=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_NETNET=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_NETPORT=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_NETIFACE=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_LIST_SET=y" >> ./common/arch/arm64/configs/gki_defconfig
            # Enable IPv6 Network Address Translation
            echo "CONFIG_IP6_NF_NAT=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP6_NF_TARGET_MASQUERADE=y" >> ./common/arch/arm64/configs/gki_defconfig
            # Due to vintf compatibility detection rules on some devices, enabling CONFIG_IP6_NF_NAT may cause a "Your device has an internal issue. Please contact your device manufacturer for details." prompt at boot. Therefore, add a configuration patch to hide CONFIG_IP6_NF_NAT=y during kernel compilation without affecting the compilation of the corresponding functionality
            cd common
            wget https://github.com/cctv18/oppo_oplus_realme_sm8650/raw/refs/heads/main/other_patch/config.patch
            patch -p1 -F 3 < config.patch || true
          fi
      - name: Add BBR and Other Congestion Control Algorithms
        run: |
          if [[ "${{ github.event.inputs.bbr_enable }}" == "true" || "${{ github.event.inputs.bbr_enable }}" == "default" ]]; then
            echo "Adding BBR and Other Congestion Control Algorithms..."
            cd kernel_workspace
            # Enable TCP congestion control algorithm controller (required)
            echo "CONFIG_TCP_CONG_ADVANCED=y" >> ./common/arch/arm64/configs/gki_defconfig
            ################################################################################################################################
            # BBR: A representative congestion control algorithm based on link capacity, which no longer uses packet loss or delay signals to measure congestion but directly models the network to respond to and avoid real network congestion;
            # Features high throughput, low latency, and packet loss resistance, but when used on phones, it increases CPU and RF module power consumption due to continuous bandwidth/RTT probing, high-frequency calculations, and packet sending, leading to increased power consumption and heat;
            # Additionally, mobile base station buffer depths are typically small (~50ms), and BBR’s bandwidth probing phase (ProbeRTT) may cause excessive window reduction, leading to sudden throughput drops. During network switching (WiFi→5G), it needs to re-probe parameters, which may increase latency or cause rate fluctuations (brief stuttering). It also exhibits RTT unfairness, potentially being too aggressive when competing with loss-based flows, seizing more bandwidth from other applications in mixed network environments (e.g., BBR + CUBIC coexistence), reducing fairness for other apps (e.g., background software updates affecting foreground video playback).
            # Therefore, while BBR can significantly reduce queuing latency and has strong packet loss resistance and high bandwidth utilization, it increases power consumption and is prone to network rate fluctuations. Hence, Android systems do not use the BBR congestion algorithm by default, opting instead for the CUBIC algorithm, which achieves the best balance of throughput, stability, compatibility, and energy efficiency. Before enabling BBR, please consider whether it is truly necessary for your use case.
            ################################################################################################################################
            echo "CONFIG_TCP_CONG_BBR=y" >> ./common/arch/arm64/configs/gki_defconfig
            # CUBIC: Android’s default TCP congestion control algorithm, achieving the best balance of throughput, stability, compatibility, and energy efficiency, with high compatibility, fairness, strong resistance to network fluctuations, and low computational overhead, making it the preferred choice for most mobile scenarios
            echo "CONFIG_TCP_CONG_CUBIC=y" >> ./common/arch/arm64/configs/gki_defconfig
            # VEGAS: A delay-based congestion control algorithm that considers Round Trip Time (RTT) increases as congestion, increasing the congestion window when RTT increases and decreasing it when RTT decreases
            echo "CONFIG_TCP_CONG_VEGAS=y" >> ./common/arch/arm64/configs/gki_defconfig
            # New Vegas: An improved version of the Vegas algorithm, optimizing RTT measurement and competitive fairness, improving congestion detection accuracy and coexistence with Reno/CUBIC
            echo "CONFIG_TCP_CONG_NV=y" >> ./common/arch/arm64/configs/gki_defconfig
            # Westwood+: Dynamically sets the congestion window and slow start threshold based on bandwidth estimation (ACK arrival rate); fast recovery, suitable for wireless networks (distinguishing congestion loss from wireless loss)
            echo "CONFIG_TCP_CONG_WESTWOOD=y" >> ./common/arch/arm64/configs/gki_defconfig
            # HTCP: A loss-based algorithm using AIMD to control the congestion window, dynamically adjusting the growth factor based on RTT, combining delay and loss signals, optimized for high-latency high-speed networks
            echo "CONFIG_TCP_CONG_HTCP=y" >> ./common/arch/arm64/configs/gki_defconfig
            # Brutal: A congestion algorithm that maximizes throughput through active probing and aggressive preemption, with no congestion window limit, not reducing the window for light packet loss (<20%), avoiding BBR’s ProbeRTT phase, and maintaining high sending rates. When coexisting with Reno/CUBIC, Brutal can seize 90%+ bandwidth through high-frequency packet sending, suitable for high-loss weak network environments (e.g., public Wi-Fi, cellular networks) and scenarios like live streaming or cloud gaming uplinks that prioritize throughput over latency sensitivity, improving weak network throughput and countering carrier QoS restrictions. However, TCP Brutal only works properly after applications set bandwidth parameters for each TCP connection, which most Android apps do not support, so do not set TCP Brutal as the default congestion control algorithm.
            echo "CONFIG_TCP_CONG_BRUTAL=y" >> ./common/arch/arm64/configs/gki_defconfig
            if [[ "${{ github.event.inputs.bbr_enable }}" == "default" ]]; then
              echo "Setting BBR as the Default Congestion Control Algorithm..."
              echo "CONFIG_DEFAULT_TCP_CONG=bbr" >> ./common/arch/arm64/configs/gki_defconfig
            else
              echo "CONFIG_DEFAULT_TCP_CONG=cubic" >> ./common/arch/arm64/configs/gki_defconfig
            fi
          fi
      - name: Enable Samsung SSG IO Scheduler
        run: |
          if [[ "${{ github.event.inputs.ssg_rekernel_enable }}" == "1" || "${{ github.event.inputs.ssg_rekernel_enable }}" == "3" ]]; then
            echo "Enabling Samsung SSG IO Scheduler (may cause boot failure on rare devices like OnePlus 12; disable this if issues occur)..."
            cd kernel_workspace
            echo "CONFIG_MQ_IOSCHED_SSG=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_MQ_IOSCHED_SSG_CGROUP=y" >> ./common/arch/arm64/configs/gki_defconfig
          fi
      - name: Enable Re-Kernel Support
        run: |
          if [[ "${{ github.event.inputs.ssg_rekernel_enable }}" == "2" || "${{ github.event.inputs.ssg_rekernel_enable }}" == "3" ]]; then
            echo "Enabling Re-Kernel Support (used with Freezer, NoActive, etc., to enhance background freezing capabilities)..."
            cd kernel_workspace
            echo "CONFIG_REKERNEL=y" >> ./common/arch/arm64/configs/gki_defconfig
          fi
      - name: Add Build Name
        run: |
          cd kernel_workspace
          echo "Replacing Kernel Version Suffix..."
          if [[ -n "${{ github.event.inputs.kernel_suffix }}" ]]; then
            echo "Current Kernel Version Suffix: ${{ github.event.inputs.kernel_suffix }}"
            for f in ./common/scripts/setlocalversion; do
              sed -i "\$s|echo \"\\\$res\"|echo \"-${{ github.event.inputs.kernel_suffix }}\"|" "$f"
            done
          else
            echo "Current Kernel Version Suffix: ${{ env.KERNEL_NAME }}"
            for f in ./common/scripts/setlocalversion; do
              sed -i "\$s|echo \"\\\$res\"|echo \"-${{ env.KERNEL_NAME }}\"|" "$f"
            done
          fi
           
      - name: Build Kernel
        run: |
          WORKDIR="$(pwd)"
          export PATH="/usr/lib/ccache:$PATH"
          export PATH="$WORKDIR/kernel_workspace/clang20/bin:$PATH"
          export PATH="$WORKDIR/kernel_workspace/build-tools/bin:$PATH"
          CLANG_DIR="$WORKDIR/kernel_workspace/clang20/bin"
          CLANG_VERSION="$($CLANG_DIR/clang --version | head -n 1)"
          LLD_VERSION="$($CLANG_DIR/ld.lld --version | head -n 1)"
          echo "Compiler Information:"
          echo "Clang Version: $CLANG_VERSION"
          echo "LLD Version: $LLD_VERSION"
          pahole_version=$(pahole --version 2>/dev/null | head -n1); [ -z "$pahole_version" ] && echo "pahole Version: Not Installed" || echo "pahole Version: $pahole_version"
          
          export CCACHE_COMPILERCHECK="%compiler% -dumpmachine; %compiler% -dumpversion"
          export CCACHE_NOHASHDIR="true"
          export CCACHE_HARDLINK="true"
          export CCACHE_DIR="${{ env.CCACHE_DIR }}"
          export CCACHE_MAXSIZE="3G"
          
          cd kernel_workspace
          #if [[ ${{ github.event.inputs.scx_enable }} == "true" ]]; then
          #  git clone https://github.com/cctv18/sched_ext.git
          #  rm -rf ./sched_ext/.git
          #  rm -rf ./sched_ext/README.md
          #  cp -r ./sched_ext/* ./common/kernel/sched
          #fi
          cd common
          # Clean unnecessary .NET, Android NDK, Haskell, and CodeQL runtimes during kernel build to free up space without blocking subsequent steps
          sudo rm -rf /usr/share/dotnet &
          sudo rm -rf /usr/local/lib/android &
          sudo rm -rf /opt/ghc &
          sudo rm -rf /opt/hostedtoolcache/CodeQL &
          make -j$(nproc --all) LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CC="ccache clang" LD=ld.lld HOSTLD=ld.lld O=out KCFLAGS+=-O2 KCFLAGS+=-Wno-error gki_defconfig Image
          echo "Kernel Build Completed!"
          echo "ccache Status:"
          ccache -s
          echo "Post-build Space:"
          df -h
         
      - name: Apply KPM and Patch Kernel
        run: |
          if [[ ${{ github.event.inputs.kpm_enable }} == 'true' && ${{ github.event.inputs.ksu_type }} == "sukisu" ]]; then
            echo "Applying KPM and Patching Kernel..."
            cd kernel_workspace/common/out/arch/arm64/boot
            curl -LO https://github.com/ShirkNeko/SukiSU_KernelPatch_patch/releases/download/0.12.0/patch_linux
            chmod +x patch_linux
            ./patch_linux
            rm -f Image
            mv oImage Image
          fi
          
      - name: Clone AnyKernel3 and Package
        run: |
          cd kernel_workspace
          git clone https://github.com/cctv18/AnyKernel3 --depth=1
          rm -rf ./AnyKernel3/.git
          cd AnyKernel3
          cp ../common/out/arch/arm64/boot/Image ./Image
          if [[ ! -f ./Image ]]; then
            echo "Kernel Image File Not Found, Build May Have Failed"
            exit 1
          fi
          if [[ ${{ github.event.inputs.ksu_type }} == "sukisu" ]]; then
            KSU_TYPENAME="SukiSU"
          else
            KSU_TYPENAME="KSUNext"
          fi
          if [[ "${{ github.event.inputs.lz4_enable }}" == "2" || "${{ github.event.inputs.lz4_enable }}" == "3" ]]; then
            wget https://raw.githubusercontent.com/cctv18/oppo_oplus_realme_sm8650/refs/heads/main/zram.zip
          fi
          if [[ -n "${{ github.event.inputs.kernel_suffix }}" ]]; then
            zip -r ../AnyKernel3_${KSU_TYPENAME}_${{ env.KSUVER }}_${{ env.KERNEL_VERSION }}_A15_${{ github.event.inputs.kernel_suffix }}.zip ./*
          else
            zip -r ../AnyKernel3_${KSU_TYPENAME}_${{ env.KSUVER }}_${{ env.KERNEL_VERSION }}_A15_${{ env.KERNEL_NAME }}.zip ./*
          fi
      - name: Upload ZIP Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Kernel_ZIP_Artifacts
          path: ${{ github.workspace }}/kernel_workspace/AnyKernel*.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      actions: read
      
    steps:
      - name: Download ZIP Artifact
        uses: actions/download-artifact@v4
        with:
          name: Kernel_ZIP_Artifacts
          path: ./release_zips

      - name: Set Environment Variables
        run: |
          if [[ -n "${{ github.event.inputs.kernel_suffix }}" ]]; then
            FULL_VERSION=${{ format('{0}.118-{1}', env.KERNEL_VERSION, github.event.inputs.kernel_suffix) }}
            echo "FULL_VERSION=$FULL_VERSION" >> $GITHUB_ENV
            export FULL_VERSION=$FULL_VERSION
          else
            FULL_VERSION=${{ format('{0}.118-{1}', env.KERNEL_VERSION, env.KERNEL_NAME) }}
            echo "FULL_VERSION=$FULL_VERSION" >> $GITHUB_ENV
            export FULL_VERSION=$FULL_VERSION
          fi
          TIME="$(TZ='Asia/Shanghai' date +'%y%m%d%H%M%S')"
          TIME_FORM="$(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M:%S')"
          echo "TIME=$TIME" >> $GITHUB_ENV
          echo "TIME_FORM=$TIME_FORM" >> $GITHUB_ENV
          TAG_HEAD="OPPO+OPlus+Realme-A15-build"
          echo "TAG_HEAD=$TAG_HEAD" >> $GITHUB_ENV
          if [[ ${{ github.event.inputs.ksu_type }} == "sukisu" ]]; then
            KSU_BRANCH="SukiSU Ultra"
          else
            KSU_BRANCH="KernelSU Next"
          fi
          echo "KSU_BRANCH=$KSU_BRANCH" >> $GITHUB_ENV
          if [[ "${{ github.event.inputs.lz4_enable }}" == "2" || "${{ github.event.inputs.lz4_enable }}" == "3" ]]; then
            lz4kd_enable="true"
          else
            lz4kd_enable="false"
          fi
          if [[ "${{ github.event.inputs.lz4_enable }}" == "1" || "${{ github.event.inputs.lz4_enable }}" == "3" ]]; then
            lz4_zstd_enable="true"
          else
            lz4_zstd_enable="false"
          fi
          if [[ "${{ github.event.inputs.ssg_rekernel_enable }}" == "1" || "${{ github.event.inputs.ssg_rekernel_enable }}" == "3" ]]; then
            ssg_enable="true"
          else
            ssg_enable="false"
          fi
          if [[ "${{ github.event.inputs.ssg_rekernel_enable }}" == "2" || "${{ github.event.inputs.ssg_rekernel_enable }}" == "3" ]]; then
            rekernel_enable="true"
          else
            rekernel_enable="false"
          fi
          echo "lz4kd_enable=$lz4kd_enable" >> $GITHUB_ENV
          echo "lz4_zstd_enable=$lz4_zstd_enable" >> $GITHUB_ENV
          echo "ssg_enable=$ssg_enable" >> $GITHUB_ENV
          echo "rekernel_enable=$rekernel_enable" >> $GITHUB_ENV
         
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "${{ env.TAG_HEAD }}-${{ env.TIME }}"
          name: "${{ env.TAG_HEAD }}-${{ env.FULL_VERSION }}"
          body: |
            ### 📱 OPPO+OPlus+Realme Android 15 ${{ env.KSU_BRANCH }} SM8650 Universal Kernel | Build Information
            - Kernel Version: ${{ env.FULL_VERSION }}
            - Build Time: ${{ env.TIME_FORM }}
            - Device Model: OPPO+OPlus+Realme Snapdragon 8Gen3 6.1.118 Android 14 Universal Kernel (based on OnePlus 12 6.1.118 Android 15 official OKI source code)
            - Features: ${{ env.KSU_BRANCH }} + SUSFS + VFS + KPM
            - Hook Mode: ${{ github.event.inputs.hook_method }}
            - KPM Support (only applies to sukiSU): ${{ github.event.inputs.kpm_enable }}
            - LZ4KD Support: ${{ env.lz4kd_enable }}
            - LZ4 Support: ${{ env.lz4_zstd_enable }}
            - Enhanced Network Features: ${{ github.event.inputs.better_net }}
            - BBR/Brutal Congestion Control Algorithm Support: ${{ github.event.inputs.bbr_enable }}
            - Samsung SSG IO Scheduler Support: ${{ env.ssg_enable }}
            - Re-Kernel Support: ${{ env.rekernel_enable }}
            - Recommended System: ColorOS 15 / RealmeUI 6.0
            - SukiSU Ultra Manager Download: [SukiSU-Ultra](https://github.com/SukiSU-Ultra/SukiSU-Ultra/releases)
            - KernelSU Next Manager Download: [KernelSU-Next](https://github.com/KernelSU-Next/KernelSU-Next/releases)
            ### ⏫️ Update Content:
            - Updated ${{ env.KSU_BRANCH }} to the latest version (${{ needs.build.outputs.ksuver }})
            - (Reserved)
            ### 📋 Installation Method | Installation Guide
            1. If your phone has a third-party recovery (e.g., TWRP) installed, download the AnyKernel flash package for your device model, enter Recovery mode, flash the package via Recovery, and reboot the device.
            2. If your phone already has root privileges, you can install [HorizonKernelFlasher](https://github.com/libxzr/HorizonKernelFlasher/releases) on your phone, flash the AnyKernel package using HorizonKernelFlasher, and reboot.
            3. If you have previously flashed the SukiSU Ultra kernel and the SukiSU Ultra Manager is updated to the latest version, you can flash the AnyKernel package directly in the SukiSU Ultra Manager and reboot.
            4. Before flashing a kernel without the lz4kd patch, if you previously flashed a kernel with the lz4kd patch, disable the zram module to avoid issues.
            #### ※※※ Flashing the Kernel Carries Risks. To prevent unexpected issues that may brick your phone, please be sure to back up critical boot partitions such as boot using [KernelFlasher](https://github.com/capntrips/KernelFlasher) before flashing the kernel! ※※※
          draft: false
          prerelease: false
          files: |
            release_zips/AnyKernel3_*.zip
